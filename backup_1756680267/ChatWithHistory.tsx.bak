import React, { useEffect, useMemo, useState } from "react";

// On reste tolérant sur les types pour éviter les erreurs de compilation
type Msg = { role: "user" | "assistant" | "system"; content: string };
type Conversation = {
  id: string; title: string; model: string; provider?: string;
  updatedAt?: number; messages: Msg[];
};

// On suppose que ces fonctions existent déjà dans votre store session
// (le script précédent les a installées). Si certains noms sont différents,
// le compileur l’indiquera et on ajustera.
import {
  listConversations,
  loadConversation,
  saveConversation,
  deleteConversation,
  exportConversationAsText,
} from "../storage/session";

export default function ChatWithHistory() {
  const [history, setHistory] = useState<any[]>([]);
  const [conversation, setConversation] = useState<Conversation | null>(null);
  const [q, setQ] = useState("");

  // Chargement initial de l’index (léger)
  useEffect(() => {
    listConversations()
      .then((items: any[]) => setHistory(Array.isArray(items) ? items : []))
      .catch(() => setHistory([]));
  }, []);

  // Filtrage local ultra-rapide (titres + dernier message assistant ou user)
  const filtered = useMemo(() => {
    const query = q.trim().toLowerCase();
    if (!query) return history;
    return history.filter((h: any) => {
      const t = (h.title || "").toLowerCase();
      const lastMsg: string =
        (h.lastMessage?.toLowerCase?.()) ??
        (h.messages && h.messages.length
          ? String(h.messages[h.messages.length - 1]?.content || "").toLowerCase()
          : "");
      return t.includes(query) || lastMsg.includes(query);
    });
  }, [q, history]);

  async function openConv(id: string) {
    try {
      const conv = await loadConversation(id);
      if (conv) setConversation(conv as Conversation);
    } catch { /* noop */ }
  }

  async function saveConv() {
    if (!conversation) return;
    await saveConversation(conversation as any);
    listConversations().then((items: any[]) => setHistory(items)).catch(() => {});
  }

  async function removeConv(id: string) {
    await deleteConversation(id);
    listConversations().then((items: any[]) => setHistory(items)).catch(() => {});
    if (conversation?.id === id) setConversation(null);
  }

  async function exportTxt(id: string) {
    const txt = await exportConversationAsText(id);
    // Téléchargement côté web: crée un blob puis un lien temporaire
    const blob = new Blob([txt], { type: "text/plain;charset=utf-8" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url; a.download = `conversation_${id}.txt`;
    document.body.appendChild(a); a.click(); a.remove();
    URL.revokeObjectURL(url);
  }

  return (
    <div style={{ display:"grid", gridTemplateColumns:"320px 1fr", height:"100%", gap:12, padding:12 }}>
      {/* Colonne gauche = recherche + liste */}
      <div style={{ borderRight:"1px solid #eee", paddingRight:12, overflow:"auto" }}>
        <div style={{ marginBottom:8, position:"sticky", top:0, background:"#fff", paddingBottom:8 }}>
          <input
            value={q}
            onChange={e => setQ(e.target.value)}
            placeholder="Rechercher (titre ou dernier message)…"
            style={{ width:"100%", padding:"10px 12px", border:"1px solid #ddd", borderRadius:8 }}
          />
          <div style={{ fontSize:12, color:"#666", marginTop:6 }}>
            {q ? `Résultats : ${filtered.length}` : `Conversations : ${history.length}`}
          </div>
        </div>

        <div>
          {filtered.map((h: any) => (
            <div key={h.id}
              onClick={() => openConv(h.id)}
              style={{
                padding:"10px 8px", borderRadius:10, cursor:"pointer",
                border: conversation?.id === h.id ? "2px solid #4f46e5" : "1px solid #eee",
                marginBottom:8
              }}>
              <div style={{ fontWeight:600 }}>{h.title || "(Sans titre)"}</div>
              <div style={{ fontSize:12, color:"#666" }}>
                {h.model ?? "mistral"} · {h.updatedAt ? new Date(h.updatedAt).toLocaleString() : ""}
              </div>
              {h.lastMessage && (
                <div style={{ fontSize:12, color:"#444", marginTop:6, whiteSpace:"nowrap", overflow:"hidden", textOverflow:"ellipsis" }}>
                  {h.lastMessage}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Zone droite = conversation courante */}
      <div style={{ display:"flex", flexDirection:"column", height:"100%" }}>
        {!conversation ? (
          <div style={{ color:"#666" }}>Sélectionnez une conversation à gauche.</div>
        ) : (
          <>
            <div style={{ display:"flex", justifyContent:"space-between", alignItems:"center", marginBottom:8 }}>
              <div style={{ fontSize:18, fontWeight:700 }}>{conversation.title || "(Sans titre)"}</div>
              <div style={{ display:"flex", gap:8 }}>
                <button onClick={saveConv} style={{ padding:"8px 10px", borderRadius:8, border:"1px solid #ddd" }}>Sauver</button>
                <button onClick={() => exportTxt(conversation.id)} style={{ padding:"8px 10px", borderRadius:8, border:"1px solid #ddd" }}>Exporter .txt</button>
                <button onClick={() => removeConv(conversation.id)} style={{ padding:"8px 10px", borderRadius:8, border:"1px solid #f33", color:"#f33" }}>Supprimer</button>
              </div>
            </div>
            <div style={{ flex:1, overflow:"auto", border:"1px solid #eee", borderRadius:10, padding:12 }}>
              {conversation.messages?.map((m, idx) => (
                <div key={idx} style={{ marginBottom:10 }}>
                  <div style={{ fontSize:12, color:"#666" }}>{m.role}</div>
                  <div style={{ whiteSpace:"pre-wrap" }}>{m.content}</div>
                </div>
              ))}
            </div>
          </>
        )}
      </div>
    </div>
  );
}
