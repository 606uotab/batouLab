// @ts-nocheck
import React, { useEffect, useRef, useState } from "react";

<<<<<<< HEAD
type Meta = {
  id: string;
  label: string;
  short: string;
  long: string;
};

const MODELS: Record<string, Meta> = {
  "mistral-small-latest": { id:"mistral-small-latest", label:"mistral-small", short:"Généraliste rapide et éco. Contexte long.", long:"Modèle généraliste léger avec bonne latence et coûts réduits. Idéal pour UI réactive, assistants multiples et prototypage. Contexte étendu pour sa taille. Bon multilingue." },
  "mistral-medium-latest": { id:"mistral-medium-latest", label:"mistral-medium", short:"Généraliste premium. Raisonnement et code solides.", long:"Polyvalent haut niveau: planification, synthèse, tool calling et code. Convient aux usages pro et agents outillés. Meilleure robustesse que small, latence/coût supérieurs." },
  "magistral-medium-latest": { id:"magistral-medium-latest", label:"magistral-medium", short:"Reasoning intensif. Chaînes de pensée longues.", long:"Raisonnement avancé pour problèmes difficiles (contraintes, maths/logique). Améliore la fiabilité sur tâches complexes. Latence et coût supérieurs." },
  "codestral-latest": { id:"codestral-latest", label:"codestral", short:"Modèle code. Contexte long, FIM.", long:"Spécialisé développement: complétion, génération, FIM (insertion), création de tests, review et migrations. Contexte long utile pour gros fichiers." },
  "devstral-medium-latest": { id:"devstral-medium-latest", label:"devstral-medium", short:"Agents dev. Exploration/édition multi-fichiers.", long:"Optimisé pour agents logiciels: navigation dans codebases, refactors multi-fichiers, tool calling dans des workflows de dev. Latence/coût intermédiaires." },
  "pixtral-large-latest": { id:"pixtral-large-latest", label:"pixtral-large", short:"Vision avancée: images, documents, UI.", long:"Multimodal image→texte. Comprend des images, documents, graphiques et UI. Idéal pour captures d’écran, schémas, tableaux et docs scannés." },
  "mistral-ocr-latest": { id:"mistral-ocr-latest", label:"mistral-ocr", short:"OCR précis. Extraction texte+structure.", long:"OCR orienté compréhension documentaire: texte, tableaux, équations et médias, avec sortie ordonnée pour post-traitements (RAG, structuration)." },
  "mistral-moderation-latest": { id:"mistral-moderation-latest", label:"mistral-moderation", short:"Modération texte. Étiquettes/scores.", long:"Classifieur de sécurité pour filtrage d’entrées/sorties et journalisation. À utiliser comme garde-fou autour des autres modèles." },
  // autres
  "magistral-small-latest": { id:"magistral-small-latest", label:"magistral-small", short:"Reasoning léger. Coût/latence réduits.", long:"Version compacte de reasoning. Bon compromis pour assistants qui doivent raisonner sans budget élevé. Moins fiable que magistral-medium." },
  "devstral-small-latest": { id:"devstral-small-latest", label:"devstral-small", short:"Agents dev éco. Tool calling.", long:"Variante plus légère pour automatisations dev, Q&A code et petites éditions outillées. Moins performante que devstral-medium." },
  "mistral-large-latest": { id:"mistral-large-latest", label:"mistral-large", short:"Alias compat. Souvent pointe Medium récent.", long:"Entrée héritée pour projets existants; redirige fréquemment vers la génération Medium la plus récente. À garder pour compatibilité." },
  "ministral-8b-latest": { id:"ministral-8b-latest", label:"ministral-8b", short:"Edge 8B. Déploiements embarqués.", long:"Modèle local/embarqué plus capable. Utile hors-ligne ou contraintes fortes de données. Qualité inférieure aux Small/Medium cloud." },
  "ministral-3b-latest": { id:"ministral-3b-latest", label:"ministral-3b", short:"Edge 3B. Très léger.", long:"Ultra-compact pour appareils ou serveurs modestes. Très bonne latence. Moins performant sur tâches complexes." },
  "voxtral-small-latest": { id:"voxtral-small-latest", label:"voxtral-small", short:"Audio-instruct. Commandes vocales.", long:"Prend l’audio en entrée pour commandes/question. Prévoir segmentation/VAD côté app et gestion des durées. Pour dictée et contrôle vocal." },
  "voxtral-mini-latest": { id:"voxtral-mini-latest", label:"voxtral-mini", short:"ASR rapide. Transcription.", long:"Transcription audio→texte focalisée sur la vitesse. Idéale temps réel, moins précise que voxtral-small." },
  "open-mistral-nemo": { id:"open-mistral-nemo", label:"open-mistral-nemo", short:"Modèle ouvert multilingue.", long:"Open-weights multilingue; bon pour coûts maîtrisés et intégrations personnalisées. Moins performant que Medium sur tâches difficiles." },
  "mistral-saba-latest": { id:"mistral-saba-latest", label:"mistral-saba", short:"Optimisé Moyen-Orient/Asie du Sud.", long:"Optimisé pour certaines langues/régions. Utile pour contenu localisé. Non spécialisé vision/code." }
=======
type Meta = { id: string; label: string; short: string; long: string };

const MODELS: Record<string, Meta> = {
  // --- Mistral (existant) ---
  "mistral-small-latest": { id:"mistral-small-latest", label:"mistral-small", short:"Rapide et éco.", long:"Généraliste léger. Bonne latence/coût. Contexte long pour sa taille." },
  "mistral-medium-latest": { id:"mistral-medium-latest", label:"mistral-medium", short:"Polyvalent premium.", long:"Raisonnement/code solides, usages pro, tool calling." },
  "magistral-medium-latest": { id:"magistral-medium-latest", label:"magistral-medium", short:"Reasoning avancé.", long:"Pour problèmes difficiles, coût/latence supérieurs." },
  "codestral-latest": { id:"codestral-latest", label:"codestral", short:"Modèle code.", long:"Complétion, FIM, tests et review." },
  "devstral-medium-latest": { id:"devstral-medium-latest", label:"devstral-medium", short:"Agents dev.", long:"Exploration/édition multi-fichiers." },
  "pixtral-large-latest": { id:"pixtral-large-latest", label:"pixtral-large", short:"Vision avancée.", long:"Image→texte pour docs, UI, schémas." },
  "mistral-ocr-latest": { id:"mistral-ocr-latest", label:"mistral-ocr", short:"OCR structuré.", long:"Extraction texte/tableaux/équations." },
  "mistral-moderation-latest": { id:"mistral-moderation-latest", label:"mistral-moderation", short:"Modération.", long:"Classifieur sécurité I/O." },
  "magistral-small-latest": { id:"magistral-small-latest", label:"magistral-small", short:"Reasoning léger.", long:"Compromis coût/latence." },
  "devstral-small-latest": { id:"devstral-small-latest", label:"devstral-small", short:"Agents dev éco.", long:"Automatisations dev et Q/A code." },
  "mistral-large-latest": { id:"mistral-large-latest", label:"mistral-large", short:"Alias compat.", long:"Entrée héritée." },
  "ministral-8b-latest": { id:"ministral-8b-latest", label:"ministral-8b", short:"Edge 8B.", long:"Local/embarqué." },
  "ministral-3b-latest": { id:"ministral-3b-latest", label:"ministral-3b", short:"Edge 3B.", long:"Très léger." },
  "voxtral-small-latest": { id:"voxtral-small-latest", label:"voxtral-small", short:"Audio-instruct.", long:"Commandes vocales." },
  "voxtral-mini-latest": { id:"voxtral-mini-latest", label:"voxtral-mini", short:"ASR rapide.", long:"Transcription temps réel." },
  "open-mistral-nemo": { id:"open-mistral-nemo", label:"open-mistral-nemo", short:"Open weights.", long:"Multilingue ouvert." },
  "mistral-saba-latest": { id:"mistral-saba-latest", label:"mistral-saba", short:"Langues régionales.", long:"Optimisé MO/Asie du Sud." },

  // --- Anthropic (Claude) ---
  "claude-opus-4-1-20250805": { id:"claude-opus-4-1-20250805", label:"claude-opus-4.1", short:"Raisonnement profond.", long:"Précision/cohérence élevées. Contexte long. Coût/latence supérieurs." },
  "claude-sonnet-4-20250514": { id:"claude-sonnet-4-20250514", label:"claude-sonnet-4", short:"Équilibre vitesse/coût.", long:"Polyvalent et rapide pour usages quotidiens." },

  // --- OpenAI ---
  "gpt-5": { id:"gpt-5", label:"gpt-5", short:"Généraliste SOTA.", long:"Modèle principal. Texte/code. Bon compromis profondeur/robustesse." },
>>>>>>> 8b0e35b (chore: release v0.0.3-alpha)
};

const PRIMARY = [
  "mistral-small-latest",
  "mistral-medium-latest",
<<<<<<< HEAD
=======
  "claude-sonnet-4-20250514",
  "claude-opus-4-1-20250805",
  "gpt-5",
];

const OTHERS = [
>>>>>>> 8b0e35b (chore: release v0.0.3-alpha)
  "magistral-medium-latest",
  "codestral-latest",
  "devstral-medium-latest",
  "pixtral-large-latest",
  "mistral-ocr-latest",
  "mistral-moderation-latest",
<<<<<<< HEAD
];

const OTHERS = [
=======
>>>>>>> 8b0e35b (chore: release v0.0.3-alpha)
  "magistral-small-latest",
  "devstral-small-latest",
  "mistral-large-latest",
  "ministral-8b-latest",
  "ministral-3b-latest",
  "voxtral-small-latest",
  "voxtral-mini-latest",
  "open-mistral-nemo",
  "mistral-saba-latest",
];

<<<<<<< HEAD
export default function ModelSelector({
  activeModel,
  onPick,
}: {
  activeModel: string;
  onPick: (id: string) => void;
}) {
  const [open, setOpen] = useState(false);
  const [othersOpen, setOthersOpen] = useState(false);
  const [popId, setPopId] = useState<string | null>(null);
  const [popLeft, setPopLeft] = useState<number>(360); // px
  const wrapRef = useRef<HTMLDivElement | null>(null);
  const popRef = useRef<HTMLDivElement | null>(null);
  const hideTimer = useRef<number | null>(null);
  const fadeTimer = useRef<number | null>(null);

  // Fermer menus au clic dehors
  useEffect(() => {
    function onDocClick(e: MouseEvent){
      if (wrapRef.current && !wrapRef.current.contains(e.target as Node)) {
        setOpen(false); setOthersOpen(false);
      }
    }
    function onEsc(e: KeyboardEvent){
      if (e.key === "Escape") { setOpen(false); setOthersOpen(false); hideNow(); }
    }
    document.addEventListener("mousedown", onDocClick);
    document.addEventListener("keydown", onEsc);
    return () => {
      document.removeEventListener("mousedown", onDocClick);
      document.removeEventListener("keydown", onEsc);
    };
  }, []);

  function labelFor(id: string){
    const m = MODELS[id]; return m ? m.label : id.replace(/-latest$/, "");
  }

  function pick(id: string){
    onPick(id);
    setPopId(id);
    setOpen(false);
    setOthersOpen(false);
    recalcPopLeft();
  }

  // Bulle: auto-hide 15s sauf hover; à la sortie, fade 1s
  useEffect(() => {
    clearTimers();
    if (popId){
      // @ts-ignore
      hideTimer.current = window.setTimeout(() => fadeOutThenHide(1000), 15000);
      recalcPopLeft();
    }
    return clearTimers;
  }, [popId]);

  useEffect(() => {
    function onResize(){ if (popId) recalcPopLeft(); }
    window.addEventListener("resize", onResize);
    // recalcule sur transition de la sidebar
    const sb = document.querySelector("aside.sidebar");
    function onTr(e: any){ if (e.propertyName === "width" && popId) recalcPopLeft(); }
    sb?.addEventListener("transitionend", onTr);
    return () => {
      window.removeEventListener("resize", onResize);
      sb?.removeEventListener("transitionend", onTr);
    };
  }, [popId]);

  function recalcPopLeft(){
    const sb = document.querySelector("aside.sidebar") as HTMLElement | null;
    const w = sb ? sb.getBoundingClientRect().width : 0;
    const next = Math.max(16, Math.round(w + 16));
    setPopLeft(next);
  }

  function clearTimers(){
    if (hideTimer.current){ clearTimeout(hideTimer.current); hideTimer.current = null; }
    if (fadeTimer.current){ clearTimeout(fadeTimer.current); fadeTimer.current = null; }
  }

  function hideNow(){ clearTimers(); setPopId(null); }

  function fadeOutThenHide(delayMs: number){
    const el = popRef.current; if (!el) { hideNow(); return; }
    el.classList.add("fade-out");
    // @ts-ignore
    fadeTimer.current = window.setTimeout(() => { hideNow(); el.classList.remove("fade-out"); }, delayMs);
  }

  const renderList = (ids: string[]) => (
    <div className="models-scroll">
      {ids.map((id) => {
        const m = MODELS[id];
        const isActive = activeModel === id;
        return (
          <button
            key={id}
            className={`model-pill ${isActive ? "active" : ""}`}
            title={m.short}
            onClick={() => pick(id)}
          >
=======
export default function ModelSelector({ activeModel, onPick }:{ activeModel:string; onPick:(id:string)=>void; }){
  const [open, setOpen] = useState(false);
  const [othersOpen, setOthersOpen] = useState(false);
  const [popId, setPopId] = useState<string|null>(null);
  const [popLeft, setPopLeft] = useState<number>(360);
  const wrapRef = useRef<HTMLDivElement|null>(null);
  const popRef = useRef<HTMLDivElement|null>(null);
  const hideTimer = useRef<number|null>(null);
  const fadeTimer = useRef<number|null>(null);

  useEffect(()=>{ function onDocClick(e:MouseEvent){ if(wrapRef.current && !wrapRef.current.contains(e.target as Node)){ setOpen(false); setOthersOpen(false);} }
    function onEsc(e:KeyboardEvent){ if(e.key==="Escape"){ setOpen(false); setOthersOpen(false); hideNow(); } }
    document.addEventListener("mousedown", onDocClick); document.addEventListener("keydown", onEsc);
    return ()=>{ document.removeEventListener("mousedown", onDocClick); document.removeEventListener("keydown", onEsc); };
  },[]);

  function labelFor(id:string){ return MODELS[id]?.label || id.replace(/-latest$/,""); }
  function pick(id:string){ onPick(id); setPopId(id); setOpen(false); setOthersOpen(false); recalcPopLeft(); }

  useEffect(()=>{ clearTimers(); if(popId){ /*@ts-ignore*/ hideTimer.current = window.setTimeout(()=>fadeOutThenHide(1000), 15000); recalcPopLeft(); } return clearTimers; },[popId]);
  useEffect(()=>{ function onResize(){ if(popId) recalcPopLeft(); } window.addEventListener("resize", onResize);
    const sb = document.querySelector("aside.sidebar"); function onTr(e:any){ if(e.propertyName==="width" && popId) recalcPopLeft(); }
    sb?.addEventListener("transitionend", onTr); return ()=>{ window.removeEventListener("resize", onResize); sb?.removeEventListener("transitionend", onTr); }; },[popId]);

  function recalcPopLeft(){ const sb = document.querySelector("aside.sidebar") as HTMLElement|null; const w = sb ? sb.getBoundingClientRect().width : 0; setPopLeft(Math.max(16, Math.round(w+16))); }
  function clearTimers(){ if(hideTimer.current){ clearTimeout(hideTimer.current); hideTimer.current=null; } if(fadeTimer.current){ clearTimeout(fadeTimer.current); fadeTimer.current=null; } }
  function hideNow(){ clearTimers(); setPopId(null); }
  function fadeOutThenHide(ms:number){ const el = popRef.current; if(!el){ hideNow(); return; } el.classList.add("fade-out"); /*@ts-ignore*/ fadeTimer.current = window.setTimeout(()=>{ hideNow(); el.classList.remove("fade-out"); }, ms); }

  const renderList = (ids:string[]) => (
    <div className="models-scroll">
      {ids.map((id)=>{
        const m = MODELS[id]; const isActive = activeModel === id;
        return (
          <button key={id} className={`model-pill ${isActive?"active":""}`} title={m.short} onClick={()=>pick(id)}>
>>>>>>> 8b0e35b (chore: release v0.0.3-alpha)
            <span className="pill-name">{m.label}</span>
            {isActive && <span className="pill-badge">actif</span>}
          </button>
        );
      })}
    </div>
  );

  const current = popId ? MODELS[popId] : null;

  return (
    <div className="models-wrap" ref={wrapRef}>
<<<<<<< HEAD
      <button className="model-toggle" onClick={() => setOpen(v => !v)}>
        <span>Modèle</span>
        <span className="current">{labelFor(activeModel)}</span>
        <span className="chev">{open ? "▴" : "▾"}</span>
      </button>

      {open && (
        <div className="model-menu" role="menu">
          {renderList(PRIMARY)}
          <button className="others-toggle" onClick={() => setOthersOpen(v => !v)}>
            Autres modèles <span className="chev">{othersOpen ? "▴" : "▾"}</span>
          </button>

          {othersOpen && (
            <div className="others-panel">
              {renderList(OTHERS)}
              <div className="others-actions">
                <button className="linkbtn small" onClick={() => setOthersOpen(false)}>Fermer</button>
              </div>
            </div>
          )}
        </div>
      )}

      {current && (
        <div
          className="model-pop"
          ref={popRef}
          style={{ left: `${popLeft}px` }}
          onMouseEnter={() => { clearTimers(); }}
          onMouseLeave={() => { fadeOutThenHide(1000); }}
        >
          <div className="model-pop-title">{current.label}</div>
          <div className="model-pop-body">{current.long}</div>
          <div className="model-pop-actions">
            <button className="linkbtn" onClick={() => hideNow()}>Fermer</button>
          </div>
=======
      <button className="model-toggle" onClick={()=>setOpen(v=>!v)}>
        <span>Modèle</span><span className="current">{labelFor(activeModel)}</span><span className="chev">{open?"▴":"▾"}</span>
      </button>
      {open && (
        <div className="model-menu" role="menu">
          {renderList(PRIMARY)}
          <button className="others-toggle" onClick={()=>setOthersOpen(v=>!v)}>Autres modèles <span className="chev">{othersOpen?"▴":"▾"}</span></button>
          {othersOpen && (<div className="others-panel">{renderList(OTHERS)}<div className="others-actions"><button className="linkbtn small" onClick={()=>setOthersOpen(false)}>Fermer</button></div></div>)}
        </div>
      )}
      {current && (
        <div className="model-pop" ref={popRef} style={{ left: `${popLeft}px` }} onMouseEnter={()=>{ clearTimers(); }} onMouseLeave={()=>{ fadeOutThenHide(1000); }}>
          <div className="model-pop-title">{current.label}</div>
          <div className="model-pop-body">{current.long}</div>
          <div className="model-pop-actions"><button className="linkbtn" onClick={()=>hideNow()}>Fermer</button></div>
>>>>>>> 8b0e35b (chore: release v0.0.3-alpha)
        </div>
      )}
    </div>
  );
}
<<<<<<< HEAD

=======
>>>>>>> 8b0e35b (chore: release v0.0.3-alpha)
